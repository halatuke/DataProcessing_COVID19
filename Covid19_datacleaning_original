{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c10d2a8d",
      "metadata": {
        "id": "c10d2a8d"
      },
      "outputs": [],
      "source": [
        "# # Data Imports"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "95ad0623",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "95ad0623"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8df1ab87",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "8df1ab87"
      },
      "outputs": [],
      "source": [
        "#Importing Data: One for original and the other covi19 is where we will prepare the data for analysis\n",
        "original = pd.read_csv(\"COVID-19BehaviorData_CAN_USA.csv\")\n",
        "covid19 = pd.read_csv(\"COVID-19BehaviorData_CAN_USA.csv\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "feb08fa0",
      "metadata": {
        "id": "feb08fa0"
      },
      "outputs": [],
      "source": [
        "# # Initial Data Review"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6342c092",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "6342c092"
      },
      "outputs": [],
      "source": [
        "# Number of records and variables\n",
        "covid19.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ed19b471",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "ed19b471"
      },
      "outputs": [],
      "source": [
        "# First 10 data records\n",
        "covid19.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1ec60b6f",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "1ec60b6f"
      },
      "outputs": [],
      "source": [
        "# List of variable data types\n",
        "covid19.dtypes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1c60ffa3",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "1c60ffa3"
      },
      "outputs": [],
      "source": [
        "# Number of float variables\n",
        "float_list = list(covid19.select_dtypes(['float64']).columns)\n",
        "len(float_list)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bd8c779f",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "bd8c779f"
      },
      "outputs": [],
      "source": [
        "# Number of integer variables\n",
        "integer_list = list(covid19.select_dtypes(['int64']).columns)\n",
        "len(integer_list)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9d2d910c",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "9d2d910c"
      },
      "outputs": [],
      "source": [
        "# Number of object variables\n",
        "object_list = list(covid19.select_dtypes(['object']).columns)\n",
        "len(object_list)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a73fdfe9",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "a73fdfe9"
      },
      "outputs": [],
      "source": [
        "# Brief overview of data\n",
        "covid19.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "aa396ef0",
      "metadata": {
        "id": "aa396ef0"
      },
      "outputs": [],
      "source": [
        "# Checking for duplicate records. None are found.\n",
        "pd.DataFrame.duplicated(covid19).any()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b1581554",
      "metadata": {
        "id": "b1581554"
      },
      "outputs": [],
      "source": [
        "# # Transforming Numerical Variables"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4f29657c",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "4f29657c"
      },
      "outputs": [],
      "source": [
        "# Plotting all numerical variables on  density plot\n",
        "# For the following numerical variables, we see that the following variables are right skewed:\n",
        "#     i1_health,i2_health,i7a_health,i13_health,weight\n",
        "covid19.plot(figsize=(14,10), kind = 'density', subplots=True, layout=(4,4),sharex=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "26e8c0c9",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "26e8c0c9"
      },
      "outputs": [],
      "source": [
        "# Skewness for each numerical variables\n",
        "# The skewness of the identified variables are very high indicating right skewness\n",
        "covid19.skew(axis = 0, skipna = True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3d6d9f07",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "3d6d9f07"
      },
      "outputs": [],
      "source": [
        "# Transforming i1_health to reduce skewness\n",
        "covid19['i1_health'] = np.log(covid19['i1_health']+1)\n",
        "sns.kdeplot(covid19['i1_health'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b68d57ae",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "b68d57ae"
      },
      "outputs": [],
      "source": [
        "# Transforming i2_health to reduce skewness\n",
        "covid19['i2_health'] = np.log(covid19['i2_health']+1)\n",
        "sns.kdeplot(covid19['i2_health'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2a66c10c",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "2a66c10c"
      },
      "outputs": [],
      "source": [
        "# Transforming i7a_health to reduce skewness\n",
        "covid19['i7a_health'] = np.log(covid19['i7a_health']+1)\n",
        "sns.kdeplot(covid19['i7a_health'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4d2b55f0",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "4d2b55f0"
      },
      "outputs": [],
      "source": [
        "# Transforming i13_health to reduce skewness\n",
        "covid19['i13_health'] = np.log(covid19['i13_health']+1)\n",
        "sns.kdeplot(covid19['i13_health'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "70115482",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "70115482"
      },
      "outputs": [],
      "source": [
        "# Transforming weight to reduce skewness\n",
        "covid19['weight'] = np.log(covid19['weight'])\n",
        "sns.kdeplot(covid19[\"weight\"])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6b1697d5",
      "metadata": {
        "id": "6b1697d5"
      },
      "outputs": [],
      "source": [
        "#Rechecking skewness\n",
        "# All numerical variables are now close to 0\n",
        "covid19.skew(axis = 0, skipna = True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7492c2dd",
      "metadata": {
        "id": "7492c2dd"
      },
      "outputs": [],
      "source": [
        "# Plotting all numerical variables on  density plot\n",
        "covid19.plot(figsize=(14,10), kind = 'density', subplots=True, layout=(4,4),sharex=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8d61887d",
      "metadata": {
        "id": "8d61887d"
      },
      "outputs": [],
      "source": [
        "## Transforming Categorical Variables"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e262b7d1",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "e262b7d1"
      },
      "outputs": [],
      "source": [
        "# The function for changing uncertain values to missing values\n",
        "\n",
        "uncertain_option = ['Not sure','Prefer not to say',\"Don't know\"]\n",
        "\n",
        "def missing_value_rescale(column_value):\n",
        "    if column_value in uncertain_option:\n",
        "        return None\n",
        "    else:\n",
        "        return column_value\n",
        "\n",
        "missing_value_rescale('Not sure')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "89f96e43",
      "metadata": {
        "id": "89f96e43"
      },
      "outputs": [],
      "source": [
        "# Applying the function to variables that have uncertain values\n",
        "\n",
        "covid19['i4_health'] = covid19['i4_health'].apply(missing_value_rescale)\n",
        "\n",
        "covid19['i5a_health'] = covid19['i5a_health'].apply(missing_value_rescale)\n",
        "\n",
        "covid19['i8_health'] = covid19['i8_health'].apply(missing_value_rescale)\n",
        "\n",
        "covid19['i9_health'] = covid19['i9_health'].apply(missing_value_rescale)\n",
        "\n",
        "covid19['i10_health'] = covid19['i10_health'].apply(missing_value_rescale)\n",
        "\n",
        "covid19['i11_health'] = covid19['i11_health'].apply(missing_value_rescale)\n",
        "\n",
        "covid19['household_size'] = covid19['household_size'].apply(missing_value_rescale)\n",
        "\n",
        "covid19['household_children'] = covid19['household_children'].apply(missing_value_rescale)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "513dcc55",
      "metadata": {
        "id": "513dcc55"
      },
      "outputs": [],
      "source": [
        "# The function for changing binary variables to dummy variables\n",
        "\n",
        "def two_value_rescale(column_value):\n",
        "    if column_value == None or column_value == ' ':\n",
        "        return None\n",
        "    elif column_value == 'Yes':\n",
        "        return 1\n",
        "    else:\n",
        "        return 0"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c26aa368",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "c26aa368"
      },
      "outputs": [],
      "source": [
        "# Applying the function to binary variables\n",
        "\n",
        "covid19['i5_health_1'] = covid19['i5_health_1'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i5_health_2'] = covid19['i5_health_2'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i5_health_3'] = covid19['i5_health_3'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i5_health_4'] = covid19['i5_health_4'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i5_health_5'] = covid19['i5_health_5'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i5_health_99'] = covid19['i5_health_99'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i5a_health'] = covid19['i5a_health'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i7b_health'] = covid19['i7b_health'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i8_health'] = covid19['i8_health'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i9_health'] = covid19['i9_health'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i14_health_1'] = covid19['i14_health_1'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i14_health_2'] = covid19['i14_health_2'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i14_health_3'] = covid19['i14_health_3'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i14_health_4'] = covid19['i14_health_4'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i14_health_5'] = covid19['i14_health_5'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i14_health_6'] = covid19['i14_health_6'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i14_health_7'] = covid19['i14_health_7'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i14_health_8'] = covid19['i14_health_8'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i14_health_9'] = covid19['i14_health_9'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i14_health_10'] = covid19['i14_health_10'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i14_health_96'] = covid19['i14_health_96'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i14_health_98'] = covid19['i14_health_98'].apply(two_value_rescale)\n",
        "\n",
        "covid19['i14_health_99'] = covid19['i14_health_99'].apply(two_value_rescale)\n",
        "\n",
        "covid19['d1_health_1'] = covid19['d1_health_1'].apply(two_value_rescale)\n",
        "\n",
        "covid19['d1_health_2'] = covid19['d1_health_2'].apply(two_value_rescale)\n",
        "\n",
        "covid19['d1_health_3'] = covid19['d1_health_3'].apply(two_value_rescale)\n",
        "\n",
        "covid19['d1_health_4'] = covid19['d1_health_4'].apply(two_value_rescale)\n",
        "\n",
        "covid19['d1_health_5'] = covid19['d1_health_5'].apply(two_value_rescale)\n",
        "\n",
        "covid19['d1_health_6'] = covid19['d1_health_6'].apply(two_value_rescale)\n",
        "\n",
        "covid19['d1_health_7'] = covid19['d1_health_7'].apply(two_value_rescale)\n",
        "\n",
        "covid19['d1_health_8'] = covid19['d1_health_8'].apply(two_value_rescale)\n",
        "\n",
        "covid19['d1_health_9'] = covid19['d1_health_9'].apply(two_value_rescale)\n",
        "\n",
        "covid19['d1_health_10'] = covid19['d1_health_10'].apply(two_value_rescale)\n",
        "\n",
        "covid19['d1_health_11'] = covid19['d1_health_11'].apply(two_value_rescale)\n",
        "\n",
        "covid19['d1_health_12'] = covid19['d1_health_12'].apply(two_value_rescale)\n",
        "\n",
        "covid19['d1_health_13'] = covid19['d1_health_13'].apply(two_value_rescale)\n",
        "\n",
        "covid19['d1_health_98'] = covid19['d1_health_98'].apply(two_value_rescale)\n",
        "\n",
        "covid19['d1_health_99'] = covid19['d1_health_99'].apply(two_value_rescale)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4134418b",
      "metadata": {
        "id": "4134418b"
      },
      "outputs": [],
      "source": [
        "# The function for changing  variables with sequenced options to a scaled variable\n",
        "five_option1 = ['Very easy','Very willing','Always']\n",
        "five_option2 = ['Somewhat easy', 'Somewhat willing','Frequently']\n",
        "five_option3 = ['Neither easy nor difficult','Neither willing nor unwilling','Sometimes']\n",
        "five_option4 = ['Somewhat difficult','Somewhat unwilling','Rarely']\n",
        "\n",
        "def five_value_rescale(column_value):\n",
        "    if column_value == None or column_value == ' ':\n",
        "        return None\n",
        "    elif column_value in five_option1:\n",
        "        return 1\n",
        "    elif column_value in five_option2:\n",
        "        return 2\n",
        "    elif column_value in five_option3:\n",
        "        return 3\n",
        "    elif column_value in five_option4:\n",
        "        return 4\n",
        "    else:\n",
        "        return 5"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "715b3dc7",
      "metadata": {
        "id": "715b3dc7"
      },
      "outputs": [],
      "source": [
        "# Applying the function to variables with sequenced options\n",
        "\n",
        "covid19['i6_health'] = covid19['i6_health'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i10_health'] = covid19['i10_health'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i11_health'] = covid19['i11_health'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i12_health_1'] = covid19['i12_health_1'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i12_health_2'] = covid19['i12_health_2'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i12_health_3'] = covid19['i12_health_3'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i12_health_4'] = covid19['i12_health_4'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i12_health_5'] = covid19['i12_health_5'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i12_health_6'] = covid19['i12_health_6'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i12_health_7'] = covid19['i12_health_7'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i12_health_8'] = covid19['i12_health_8'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i12_health_9'] = covid19['i12_health_9'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i12_health_10'] = covid19['i12_health_10'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i12_health_11'] = covid19['i12_health_11'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i12_health_12'] = covid19['i12_health_12'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i12_health_13'] = covid19['i12_health_13'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i12_health_14'] = covid19['i12_health_14'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i12_health_15'] = covid19['i12_health_15'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i12_health_16'] = covid19['i12_health_16'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i12_health_17'] = covid19['i12_health_17'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i12_health_18'] = covid19['i12_health_18'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i12_health_19'] = covid19['i12_health_19'].apply(five_value_rescale)\n",
        "\n",
        "covid19['i12_health_20'] = covid19['i12_health_20'].apply(five_value_rescale)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "611eaa88",
      "metadata": {
        "id": "611eaa88"
      },
      "outputs": [],
      "source": [
        "# Rescaling qweek variable to as a scaled variable\n",
        "def qweek_rescale(qweek):\n",
        "    if qweek == None or qweek == ' ':\n",
        "        return None\n",
        "    else:\n",
        "        last_str = len(qweek)\n",
        "        str_num = qweek[last_str-1]\n",
        "        num_int = int(str_num)\n",
        "        return num_int\n",
        "\n",
        "qweek_rescale('week 1')\n",
        "\n",
        "covid19['qweek']=covid19['qweek'].apply(qweek_rescale)\n",
        "covid19['qweek']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e6b5822c",
      "metadata": {
        "id": "e6b5822c"
      },
      "outputs": [],
      "source": [
        "# Changing household_size to a numerical variable\n",
        "\n",
        "def household_size_rescale(size):\n",
        "    if size == None or size == '' :\n",
        "        return None\n",
        "    elif size == '8 or more':\n",
        "        return 8\n",
        "    else:\n",
        "        num_int = int(size)\n",
        "        return num_int\n",
        "\n",
        "covid19['household_size']=covid19['household_size'].apply(household_size_rescale)\n",
        "covid19['household_size']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "51544bd8",
      "metadata": {
        "id": "51544bd8"
      },
      "outputs": [],
      "source": [
        "# Changing household_children to a numerical variable\n",
        "\n",
        "def household_children_rescale(children):\n",
        "    if children == None or children == ' ':\n",
        "        return None\n",
        "    elif children == '5 or more':\n",
        "        return 5\n",
        "    else:\n",
        "        num_int = int(children)\n",
        "        return num_int\n",
        "\n",
        "covid19['household_children']=covid19['household_children'].apply(household_children_rescale)\n",
        "covid19['household_children']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "30321ab9",
      "metadata": {
        "id": "30321ab9"
      },
      "outputs": [],
      "source": [
        "# # Variable Reclassification"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c39204a2",
      "metadata": {
        "id": "c39204a2"
      },
      "outputs": [],
      "source": [
        "# reclassification of region_state based regions in Canada and USA\n",
        "\n",
        "canada_north = ['Northwest Territories / Territoires du Nord-Ouest','Nunavut','Yukon']\n",
        "canada_west_prairies = ['Alberta','British Columbia / Colombie Britanique','Saskatchewan','Manitoba']\n",
        "canada_east = ['New Brunswick / Nouveau-Brunswick','Nova Scotia / Nouvelle-Écosse','Newfoundland & Labrador / Terre-Neuve-et-Labrador', 'Prince Edward Island / Île-du-Prince-Édouard']\n",
        "canada_central = ['Quebec / Québec','Ontario']\n",
        "usa_northeast = ['Connecticut', 'Maine','Massachusetts', 'New Hampshire', 'Rhode Island', 'Vermont', 'New Jersey', 'New York', 'Pennsylvania']\n",
        "usa_midwest = ['Indiana','Illinois','Michigan','Ohio','Wisconsin','Iowa','Nebraska','Kansas','North Dakota','Minnesota','South Dakota','Missouri']\n",
        "usa_south = ['Delaware', 'District of Columbia', 'Florida','Georgia','Maryland','North Carolina','South Carolina','Virginia','West Virginia','Alabama','Kentucky','Mississippi','Tennessee','Arkansas','Louisiana','Oklahoma','Texas']\n",
        "usa_west = ['Arizona', 'Colorado', 'Idaho', 'New Mexico', 'Montana', 'Utah', 'Nevada', 'Wyoming', 'Alaska', 'California', 'Hawaii', 'Oregon', 'Washington']\n",
        "\n",
        "def region_recode(region_state):\n",
        "    if region_state == None or region_state == ' ':\n",
        "        return None\n",
        "    elif region_state in canada_north:\n",
        "        return 'canada_north'\n",
        "    elif region_state in canada_west_prairies:\n",
        "        return 'canada_west_prairies'\n",
        "    elif region_state in canada_east:\n",
        "        return 'canada_east'\n",
        "    elif region_state in canada_central:\n",
        "        return 'canada_central'\n",
        "    elif region_state in usa_northeast:\n",
        "        return 'usa_northeast'\n",
        "    elif region_state in usa_midwest:\n",
        "        return 'usa_midwest'\n",
        "    elif region_state in usa_south:\n",
        "        return 'usa_south'\n",
        "    else:\n",
        "        return 'usa_west'\n",
        "\n",
        "\n",
        "covid19['region_state']=covid19['region_state'].apply(region_recode)\n",
        "covid19['region_state']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "de15319c",
      "metadata": {
        "id": "de15319c"
      },
      "outputs": [],
      "source": [
        "## Adjusting i3_health and i4_health"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a8ea4908",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "a8ea4908"
      },
      "outputs": [],
      "source": [
        "# Changing i3_health to a numerical variable\n",
        "\n",
        "def i3_rescale(column_value):\n",
        "    if column_value == 'No, I have not':\n",
        "        return 1\n",
        "    elif column_value == 'Yes, and I have not received my results from the test yet':\n",
        "        return 2\n",
        "    elif column_value == 'Yes, and I tested negative':\n",
        "        return 3\n",
        "    elif column_value == 'Yes, and I tested positive':\n",
        "        return 4\n",
        "\n",
        "covid19['i3_health'] = covid19['i3_health'].apply(i3_rescale)\n",
        "\n",
        "# Changing i4_health to a numerical variable\n",
        "def i4_rescale(column_value):\n",
        "    if column_value == 'No, they have not':\n",
        "        return 1\n",
        "    elif column_value == 'Yes, and they have not received their results from the test yet':\n",
        "        return 2\n",
        "    elif column_value == 'Yes, and they tested negative':\n",
        "        return 3\n",
        "    elif column_value == 'Yes, and they tested positive':\n",
        "        return 4\n",
        "\n",
        "covid19['i4_health'] = covid19['i4_health'].apply(i4_rescale)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "69717092",
      "metadata": {
        "id": "69717092"
      },
      "outputs": [],
      "source": [
        "np.random.seed(10)\n",
        "\n",
        "covid19['i3_health'] = covid19['i3_health'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['i3_health'].min(), covid19['i3_health'].max()))\n",
        "\n",
        "\n",
        "covid19['i4_health'] = covid19['i4_health'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['i4_health'].min(), covid19['i4_health'].max()))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b59e8942",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "b59e8942"
      },
      "outputs": [],
      "source": [
        "def i3_rescale_back(column_value):\n",
        "    if column_value == 1:\n",
        "        return 'No, I have not'\n",
        "    elif column_value == 2:\n",
        "        return 'Yes, and I have not received my results from the test yet'\n",
        "    elif column_value == 3:\n",
        "        return 'Yes, and I tested negative'\n",
        "    elif column_value == 4:\n",
        "        return 'Yes, and I tested positive'\n",
        "\n",
        "covid19['i3_health'] = covid19['i3_health'].apply(i3_rescale_back)\n",
        "\n",
        "def i4_rescale_back(column_value):\n",
        "    if column_value == 1:\n",
        "        return 'No, they have not'\n",
        "    elif column_value == 2:\n",
        "        return 'Yes, and they have not received their results from the test yet'\n",
        "    elif column_value == 3:\n",
        "        return 'Yes, and they tested negative'\n",
        "    elif column_value == 4:\n",
        "        return 'Yes, and they tested positive'\n",
        "\n",
        "covid19['i4_health'] = covid19['i4_health'].apply(i4_rescale_back)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7428ded6",
      "metadata": {
        "id": "7428ded6"
      },
      "outputs": [],
      "source": [
        "## Missing Values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7f81b37a",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "7f81b37a"
      },
      "outputs": [],
      "source": [
        "# Dealing with i5_health_1, i5_health_2, i5_health_3, i5_health_4, i5_health_5, i5_health_99, i9_health, i10_health, i11_health\n",
        "\n",
        "[covid19['i5_health_1'].isna().sum(),covid19['i5_health_2'].isna().sum(),covid19['i5_health_3'].isna().sum(),\n",
        " covid19['i5_health_4'].isna().sum(),covid19['i5_health_5'].isna().sum(),covid19['i5_health_99'].isna().sum(),\n",
        " covid19['i9_health'].isna().sum(), covid19['i10_health'].isna().sum(), covid19['i11_health'].isna().sum()]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9622ab75",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "9622ab75"
      },
      "outputs": [],
      "source": [
        "\n",
        "covid19['i5_health_1'] = covid19['i5_health_1'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['i5_health_1'].min(), covid19['i5_health_1'].max()))\n",
        "\n",
        "covid19['i5_health_2'] = covid19['i5_health_2'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['i5_health_2'].min(), covid19['i5_health_2'].max()))\n",
        "\n",
        "covid19['i5_health_3'] = covid19['i5_health_3'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['i5_health_3'].min(), covid19['i5_health_3'].max()))\n",
        "\n",
        "covid19['i5_health_4'] = covid19['i5_health_4'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['i5_health_4'].min(), covid19['i5_health_4'].max()))\n",
        "\n",
        "covid19['i5_health_5'] = covid19['i5_health_5'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['i5_health_5'].min(), covid19['i5_health_5'].max()))\n",
        "\n",
        "covid19['i5_health_99'] = covid19['i5_health_99'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['i5_health_99'].min(), covid19['i5_health_99'].max()))\n",
        "\n",
        "covid19['i9_health'] = covid19['i9_health'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['i9_health'].min(), covid19['i9_health'].max()))\n",
        "\n",
        "covid19['i10_health'] = covid19['i10_health'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['i10_health'].min(), covid19['i10_health'].max()))\n",
        "\n",
        "covid19['i11_health'] = covid19['i11_health'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['i11_health'].min(), covid19['i11_health'].max()))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "eaf3c4bc",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "eaf3c4bc"
      },
      "outputs": [],
      "source": [
        "# Dealing with i12_health_9. They are all not workforce: students, retired, unemployed\n",
        "# They also cannot answer this quetion. we dont know what their answer will be. Use random.\n",
        "\n",
        "covid19['i12_health_9'].isna().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4c842ebc",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "4c842ebc"
      },
      "outputs": [],
      "source": [
        "covid19['i12_health_9'] = covid19['i12_health_9'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['i12_health_9'].min(), covid19['i12_health_9'].max()))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d102bda1",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "d102bda1"
      },
      "outputs": [],
      "source": [
        "covid19['i12_health_9'].isna().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "838a35ec",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "838a35ec"
      },
      "outputs": [],
      "source": [
        "# Dealing with i12_health_10: They dont have kids so they cannot answer this question about their kids.\n",
        "# We will be filling with random values.\n",
        "\n",
        "covid19['i12_health_10'].isna().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4135a14a",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "4135a14a"
      },
      "outputs": [],
      "source": [
        "covid19['i12_health_10'] = covid19['i12_health_10'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['i12_health_10'].min(), covid19['i12_health_10'].max()))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6d904abb",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "6d904abb"
      },
      "outputs": [],
      "source": [
        "covid19['i12_health_10'].isna().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "720df7e5",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "720df7e5"
      },
      "outputs": [],
      "source": [
        "# Dealing with i14_health_1 to i14_health_99. The same situation as i12_health_9. But this time fill them with 0.\n",
        "\n",
        "[covid19['i14_health_1'].isna().sum(),covid19['i14_health_2'].isna().sum(),covid19['i14_health_3'].isna().sum(),\n",
        " covid19['i14_health_4'].isna().sum(),covid19['i14_health_5'].isna().sum(),covid19['i14_health_6'].isna().sum(),\n",
        " covid19['i14_health_7'].isna().sum(),covid19['i14_health_8'].isna().sum(),covid19['i14_health_9'].isna().sum(),\n",
        " covid19['i14_health_10'].isna().sum(),covid19['i14_health_96'].isna().sum(),covid19['i14_health_98'].isna().sum(),\n",
        " covid19['i14_health_99'].isna().sum()]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "827ad593",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "827ad593"
      },
      "outputs": [],
      "source": [
        "covid19['i14_health_1'] = covid19['i14_health_1'].apply(lambda x: x if pd.notnull(x) else 0)\n",
        "covid19['i14_health_2'] = covid19['i14_health_2'].apply(lambda x: x if pd.notnull(x) else 0)\n",
        "covid19['i14_health_3'] = covid19['i14_health_3'].apply(lambda x: x if pd.notnull(x) else 0)\n",
        "covid19['i14_health_4'] = covid19['i14_health_4'].apply(lambda x: x if pd.notnull(x) else 0)\n",
        "covid19['i14_health_5'] = covid19['i14_health_5'].apply(lambda x: x if pd.notnull(x) else 0)\n",
        "covid19['i14_health_6'] = covid19['i14_health_6'].apply(lambda x: x if pd.notnull(x) else 0)\n",
        "covid19['i14_health_7'] = covid19['i14_health_7'].apply(lambda x: x if pd.notnull(x) else 0)\n",
        "covid19['i14_health_8'] = covid19['i14_health_8'].apply(lambda x: x if pd.notnull(x) else 0)\n",
        "covid19['i14_health_9'] = covid19['i14_health_9'].apply(lambda x: x if pd.notnull(x) else 0)\n",
        "covid19['i14_health_10'] = covid19['i14_health_10'].apply(lambda x: x if pd.notnull(x) else 0)\n",
        "covid19['i14_health_96'] = covid19['i14_health_96'].apply(lambda x: x if pd.notnull(x) else 0)\n",
        "covid19['i14_health_98'] = covid19['i14_health_98'].apply(lambda x: x if pd.notnull(x) else 0)\n",
        "covid19['i14_health_99'] = covid19['i14_health_99'].apply(lambda x: x if pd.notnull(x) else 0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3f6e9dd9",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "3f6e9dd9"
      },
      "outputs": [],
      "source": [
        "[covid19['i14_health_1'].isna().sum(),covid19['i14_health_2'].isna().sum(),covid19['i14_health_3'].isna().sum(),\n",
        " covid19['i14_health_4'].isna().sum(),covid19['i14_health_5'].isna().sum(),covid19['i14_health_6'].isna().sum(),\n",
        " covid19['i14_health_7'].isna().sum(),covid19['i14_health_8'].isna().sum(),covid19['i14_health_9'].isna().sum(),\n",
        " covid19['i14_health_10'].isna().sum(),covid19['i14_health_96'].isna().sum(),covid19['i14_health_98'].isna().sum(),\n",
        " covid19['i14_health_99'].isna().sum()]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a2475762",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "a2475762"
      },
      "outputs": [],
      "source": [
        "# Dealing with d1_health_1 to d1_health_99\n",
        "\n",
        "[covid19['d1_health_1'].isna().sum(),covid19['d1_health_2'].isna().sum(),covid19['d1_health_3'].isna().sum(),\n",
        " covid19['d1_health_4'].isna().sum(),covid19['d1_health_5'].isna().sum(),covid19['d1_health_6'].isna().sum(),\n",
        " covid19['d1_health_7'].isna().sum(),covid19['d1_health_8'].isna().sum(),covid19['d1_health_9'].isna().sum(),\n",
        " covid19['d1_health_10'].isna().sum(),covid19['d1_health_11'].isna().sum(),covid19['d1_health_12'].isna().sum(),\n",
        " covid19['d1_health_13'].isna().sum(),covid19['d1_health_98'].isna().sum(), covid19['d1_health_99'].isna().sum()]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "64c87c75",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "64c87c75"
      },
      "outputs": [],
      "source": [
        "covid19['d1_health_1'] = covid19['d1_health_1'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['d1_health_1'].min(), covid19['d1_health_1'].max()))\n",
        "\n",
        "covid19['d1_health_2'] = covid19['d1_health_2'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['d1_health_2'].min(), covid19['d1_health_2'].max()))\n",
        "\n",
        "covid19['d1_health_3'] = covid19['d1_health_3'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['d1_health_3'].min(), covid19['d1_health_3'].max()))\n",
        "\n",
        "covid19['d1_health_4'] = covid19['d1_health_4'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['d1_health_4'].min(), covid19['d1_health_4'].max()))\n",
        "\n",
        "covid19['d1_health_5'] = covid19['d1_health_5'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['d1_health_5'].min(), covid19['d1_health_5'].max()))\n",
        "\n",
        "covid19['d1_health_6'] = covid19['d1_health_6'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['d1_health_6'].min(), covid19['d1_health_6'].max()))\n",
        "\n",
        "covid19['d1_health_7'] = covid19['d1_health_7'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['d1_health_7'].min(), covid19['d1_health_7'].max()))\n",
        "\n",
        "covid19['d1_health_8'] = covid19['d1_health_8'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['d1_health_8'].min(), covid19['d1_health_8'].max()))\n",
        "\n",
        "covid19['d1_health_9'] = covid19['d1_health_9'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['d1_health_9'].min(), covid19['d1_health_9'].max()))\n",
        "\n",
        "covid19['d1_health_10'] = covid19['d1_health_10'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['d1_health_10'].min(), covid19['d1_health_10'].max()))\n",
        "\n",
        "covid19['d1_health_11'] = covid19['d1_health_11'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['d1_health_11'].min(), covid19['d1_health_11'].max()))\n",
        "\n",
        "covid19['d1_health_12'] = covid19['d1_health_12'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['d1_health_12'].min(), covid19['d1_health_12'].max()))\n",
        "\n",
        "covid19['d1_health_13'] = covid19['d1_health_13'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['d1_health_13'].min(), covid19['d1_health_13'].max()))\n",
        "\n",
        "covid19['d1_health_98'] = covid19['d1_health_98'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['d1_health_98'].min(), covid19['d1_health_98'].max()))\n",
        "\n",
        "covid19['d1_health_99'] = covid19['d1_health_99'].apply(lambda x: x if pd.notnull(x)\n",
        "                                                  else np.random.randint(covid19['d1_health_99'].min(), covid19['d1_health_99'].max()))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bfe74725",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "bfe74725"
      },
      "outputs": [],
      "source": [
        "[covid19['d1_health_1'].isna().sum(),covid19['d1_health_2'].isna().sum(),covid19['d1_health_3'].isna().sum(),\n",
        " covid19['d1_health_4'].isna().sum(),covid19['d1_health_5'].isna().sum(),covid19['d1_health_6'].isna().sum(),\n",
        " covid19['d1_health_7'].isna().sum(),covid19['d1_health_8'].isna().sum(),covid19['d1_health_9'].isna().sum(),\n",
        " covid19['d1_health_10'].isna().sum(),covid19['d1_health_11'].isna().sum(),covid19['d1_health_12'].isna().sum(),\n",
        " covid19['d1_health_13'].isna().sum(),covid19['d1_health_98'].isna().sum(), covid19['d1_health_99'].isna().sum()]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "28372a30",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "28372a30"
      },
      "outputs": [],
      "source": [
        "# Dropping columns\n",
        "covid19 = covid19.drop(['i5a_health', 'i6_health', 'i7b_health', 'i8_health', 'endtime',\n",
        "                                    'i14_health_other'], axis = 1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "81437376",
      "metadata": {
        "id": "81437376"
      },
      "outputs": [],
      "source": [
        "covid19_final = covid19"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "323dcf86",
      "metadata": {
        "id": "323dcf86"
      },
      "outputs": [],
      "source": [
        "# # Final Data Review"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a87c61ca",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "a87c61ca"
      },
      "outputs": [],
      "source": [
        "# Brief overview of data\n",
        "covid19_final.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9981cc7f",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "9981cc7f"
      },
      "outputs": [],
      "source": [
        "# Brief overview of data\n",
        "covid19_final.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0072f8b4",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "0072f8b4"
      },
      "outputs": [],
      "source": [
        "float_list = list(covid19_final.select_dtypes(['float64']).columns)\n",
        "len(float_list)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "73101e2d",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "73101e2d"
      },
      "outputs": [],
      "source": [
        "integer_list = list(covid19_final.select_dtypes(['int64']).columns)\n",
        "len(integer_list)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d6bd6c51",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "d6bd6c51"
      },
      "outputs": [],
      "source": [
        "object_list = list(covid19_final.select_dtypes(['object']).columns)\n",
        "len(object_list)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bf10746a",
      "metadata": {
        "id": "bf10746a"
      },
      "outputs": [],
      "source": [
        "covid19_final.skew(axis = 0, skipna = True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "32155718",
      "metadata": {
        "lines_to_next_cell": 2,
        "id": "32155718"
      },
      "outputs": [],
      "source": [
        "#Export File\n",
        "\n",
        "covid19_final.to_csv('covid19_transformed.csv')"
      ]
    }
  ],
  "metadata": {
    "jupytext": {
      "cell_metadata_filter": "-all",
      "encoding": "# coding: utf-8",
      "executable": "/usr/bin/env python",
      "main_language": "python",
      "notebook_metadata_filter": "-all",
      "text_representation": {
        "extension": ".py",
        "format_name": "percent"
      }
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}